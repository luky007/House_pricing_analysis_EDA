{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Note</p> <p>This project is part of a dummy simulation.</p>"},{"location":"#what-it-does","title":"What it does:","text":"<ul> <li> <p>Clean the three input file given by the client.</p> </li> <li> <p>Import these inside a mySQL database.</p> </li> </ul>"},{"location":"#es-data_housecsv","title":"Es. data_house.csv","text":"ID Bathrooms Stories Main Road Guest Room Basement Hot Water Heating Air Conditioning Parking Preferred Area Furnishing Status 0 2 3 yes no no no yes 2 yes Furnished 1 4 4 yes no no no yes 3 no Furnished 2 2 2 yes no yes no no 2 yes Semi-Furnished"},{"location":"#es-housesql","title":"Es. house.sql","text":"house_ID area bedrooms 1 7420 4 2 8960 4 3 9960 3"},{"location":"#es-house_pricexls","title":"Es. house_price.xls","text":"house_ID price 1 13300000 2 12250000 3 12250000"},{"location":"ER_diagram/","title":"ER diagram","text":"<pre><code>%%{\n  init: {\n    'theme': 'dark'\n  }\n}%%\nerDiagram\n  house_data {\n    int house_id PK\n    int n_bedroom\n    int n_bathroom\n    int n_stories\n    int n_parking_slot\n    bool is_mainroad\n    bool has_guestroom\n    bool has_basement\n    bool has_hot_water\n    bool has_air_conditioning\n    bool is_pref_area\n    int furnishing_id FK\n  }\n  house_price_data {\n    int house_id PK\n    int price\n    int area\n  }\n  furnishing_status {\n    int furnishing_id PK\n    varchar furnishing_status\n  }\n  house_data ||--|| furnishing_status : \"is of type\"\n  house_data ||--|| house_price_data : \"has\"\n</code></pre>"},{"location":"docstrings/","title":"Docstrings","text":"<p>Collection of scripts for cleaning and analyzing the input dataset related to the housing market.</p> <p></p>"},{"location":"docstrings/#src.python.main.main","title":"<code>main()</code>","text":"<p>The main function.</p> Source code in <code>src/python/main.py</code> <pre><code>def main() -&gt; None:\n    \"\"\"The main function.\"\"\"\n    install(show_locals=True)\n    coloredlogs.install()  # pyright: ignore[reportUnknownMemberType]\n    logger = logging.getLogger(Path(__file__).stem)\n    logger.setLevel(logging.INFO)\n    path_current_folder = Path(__file__).resolve().parent\n    path_input_folder = Path(path_current_folder.parent.parent / \"input\")\n    connection: PooledMySQLConnection | MySQLConnectionAbstract = myc.connect(\n        host=HOST, user=USER_DB, password=PASSWORD_DB, database=NAME_DB\n    )\n    (\n        list_house_data_wip_01,\n        list_house_price_data_wip_01,\n    ) = extract_data_from_sql_house(\n        path_sql=Path(path_input_folder / \"house\").with_suffix(\".sql\")\n    )\n    list_house_data_wip_02 = read_csv_data_house(\n        path_csv=Path(path_input_folder / \"data_house\").with_suffix(\".csv\")\n    )\n    list_house_price_data_wip_02 = read_excel_house_price(\n        path_excel=Path(path_input_folder / \"house_price\").with_suffix(\".xls\")\n    )\n    list_house_data = merge_data(\n        list_instance_wip_01=list_house_data_wip_01,\n        list_instance_wip_02=list_house_data_wip_02,\n        list_broken_row={46},\n    )\n    list_house_price_data = merge_data(\n        list_instance_wip_01=list_house_price_data_wip_01,\n        list_instance_wip_02=list_house_price_data_wip_02,\n        list_broken_row={46},\n    )\n    drop_all_tables(connection=connection)\n    execute_sql_file(\n        connection=connection,\n        path_sql=Path(path_current_folder.parent / \"sql\" / \"create_tables\").with_suffix(\n            \".sql\"\n        ),\n    )\n    load_db(\n        connection=connection,\n        list_house_data=list_house_data,\n        list_house_price_data=list_house_price_data,\n    )\n</code></pre>"},{"location":"docstrings/#utils","title":"Utils","text":"<p>Collections of utility functions.</p> <p></p> <p>Represents the data structures as defined in the ER model.</p>"},{"location":"docstrings/#src.python.utils.drop_all_tables","title":"<code>drop_all_tables(connection)</code>","text":"<p>Drop all the tables created previously.</p> <p>Parameters:</p> Name Type Description Default <code>connection</code> <code>PooledMySQLConnection | MySQLConnectionAbstract</code> <p>the connection to use.</p> required Source code in <code>src/python/utils.py</code> <pre><code>def drop_all_tables(\n    connection: PooledMySQLConnection | MySQLConnectionAbstract,\n) -&gt; None:\n    \"\"\"Drop all the tables created previously.\n\n    Args:\n        connection (PooledMySQLConnection | MySQLConnectionAbstract): the connection to use.\n    \"\"\"\n    logger = logging.getLogger(Path(__file__).stem)\n    with connection.cursor() as cursor:\n        cursor.execute(\"DROP TABLE IF EXISTS house_price_data;\")\n        cursor.execute(\"DROP TABLE IF EXISTS furnishing_status;\")\n        cursor.execute(\"DROP TABLE IF EXISTS house_data;\")\n        connection.commit()\n    logger.info(\"Dropped all table in the DB\")\n</code></pre>"},{"location":"docstrings/#src.python.utils.execute_sql_file","title":"<code>execute_sql_file(connection, path_sql)</code>","text":"<p>Read and execute the sql query within an input file.</p> <p>Parameters:</p> Name Type Description Default <code>connection</code> <code>PooledMySQLConnection | MySQLConnectionAbstract</code> <p>the connection to use.</p> required <code>path_sql</code> <code>Path</code> <p>the path of the file .sql to read and execute</p> required Source code in <code>src/python/utils.py</code> <pre><code>def execute_sql_file(\n    connection: PooledMySQLConnection | MySQLConnectionAbstract, path_sql: Path\n) -&gt; None:\n    \"\"\"Read and execute the sql query within an input file.\n\n    Args:\n        connection (PooledMySQLConnection | MySQLConnectionAbstract): the connection to use.\n        path_sql (Path): the path of the file .sql to read and execute\n    \"\"\"\n    logger = logging.getLogger(Path(__file__).stem)\n    with open(path_sql, encoding=\"UTF-8\") as f:\n        sql_create_tables = f.read()\n    with connection.cursor() as cursor:\n        for sql_command in sql_create_tables.split(\";\"):\n            if sql_command.strip():\n                cursor.execute(sql_command.strip(), multi=True)\n        connection.commit()\n    logger.info(\"Executed sql file: %s\", path_sql.name)\n</code></pre>"},{"location":"docstrings/#src.python.utils.extract_data_from_sql_house","title":"<code>extract_data_from_sql_house(path_sql)</code>","text":"<p>Extract the data from the input SQL data.</p> <p>Parameters:</p> Name Type Description Default <code>path_sql</code> <code>Path</code> <p>the path of the file .sql to read</p> required <p>Returns:</p> Type Description <code>tuple[list[HouseData], list[HousePriceData]]</code> <p>tuple[list[HouseData], list[HousePriceData]]: list containing merged instances.</p> Source code in <code>src/python/utils.py</code> <pre><code>def extract_data_from_sql_house(\n    path_sql: Path,\n) -&gt; tuple[list[HouseData], list[HousePriceData]]:\n    \"\"\"Extract the data from the input SQL data.\n\n    Args:\n        path_sql (Path): the path of the file .sql to read\n\n    Returns:\n        tuple[list[HouseData], list[HousePriceData]]: list containing merged instances.\n    \"\"\"\n    list_house_data: list[HouseData] = []\n    list_house_price_data: list[HousePriceData] = []\n    with open(path_sql, encoding=\"UTF-8\") as f:\n        sql_create_tables = f.read()\n\n    # for sql_command in sql_create_tables.split(\";\"):\n    matches = re.finditer(\n        r\"INSERT INTO `` \\(`house_ID`,`area`,`bedrooms`\\)\\s+VALUES \\((\\d+),(\\d+),(\\d+)\\);\",\n        sql_create_tables,\n    )\n    for match in matches:\n        if match:\n            house_id = int(match.group(1)) - 1\n            area = int(match.group(2))\n            bedrooms = int(match.group(3))\n            list_house_price_data.append(HousePriceData(house_id=house_id, area=area))\n            list_house_data.append(HouseData(house_id=house_id, n_bedroom=bedrooms))\n    return list_house_data, list_house_price_data\n</code></pre>"},{"location":"docstrings/#src.python.utils.load_db","title":"<code>load_db(connection, list_house_data, list_house_price_data)</code>","text":"<p>Load the data inside the mySQL db.</p> <p>Parameters:</p> Name Type Description Default <code>connection</code> <code>PooledMySQLConnection | MySQLConnectionAbstract</code> <p>the connection to use.</p> required <code>list_house_data</code> <code>list[HouseData]</code> <p>list containing the instances HouseData.</p> required <code>list_house_price_data</code> <code>list[HousePriceData]</code> <p>list containing the instances HousePriceData.</p> required Source code in <code>src/python/utils.py</code> <pre><code>def load_db(\n    connection: PooledMySQLConnection | MySQLConnectionAbstract,\n    list_house_data: list[HouseData],\n    list_house_price_data: list[HousePriceData],\n) -&gt; None:\n    \"\"\"Load the data inside the mySQL db.\n\n    Args:\n        connection (PooledMySQLConnection | MySQLConnectionAbstract): the connection to use.\n        list_house_data (list[HouseData]): list containing the instances HouseData.\n        list_house_price_data (list[HousePriceData]): list containing the instances HousePriceData.\n    \"\"\"\n    logger = logging.getLogger(Path(__file__).stem)\n    with connection.cursor() as cursor:\n        for data in list_house_data:\n            cursor.execute(\n                \"INSERT INTO house_data (house_id, n_bedroom, n_bathroom, n_stories, \\\n                      is_mainroad, has_guestroom, has_basement, has_hot_water, \\\n                        has_air_conditioning, n_parking_slot, is_pref_area, furnishing_id) \\\n                            VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)\",\n                (\n                    data.house_id,\n                    data.n_bedroom,\n                    data.n_bathroom,\n                    data.n_stories,\n                    data.is_mainroad,\n                    data.has_guestroom,\n                    data.has_basement,\n                    data.has_hot_water,\n                    data.has_air_conditioning,\n                    data.n_parking_slot,\n                    data.is_pref_area,\n                    data.furnishing_id,\n                ),\n            )\n        connection.commit()\n\n    with connection.cursor() as cursor:\n        for data in list_house_price_data:\n            cursor.execute(\n                \"INSERT INTO house_price_data (house_id, price, area) \\\n                VALUES (%s, %s, %s)\",\n                (data.house_id, data.price, data.area),\n            )\n        connection.commit()\n\n    with connection.cursor() as cursor:\n        cursor.execute(\n            \"INSERT INTO furnishing_status (furnishing_id, furnishing_status) \\\n            VALUES (%s, %s)\",\n            (0, \"furnished\"),\n        )\n        cursor.execute(\n            \"INSERT INTO furnishing_status (furnishing_id, furnishing_status) \\\n            VALUES (%s, %s)\",\n            (1, \"unfurnished\"),\n        )\n        cursor.execute(\n            \"INSERT INTO furnishing_status (furnishing_id, furnishing_status) \\\n            VALUES (%s, %s)\",\n            (2, \"semi-furnished\"),\n        )\n        connection.commit()\n    logger.info(\"Successfully loaded data into the DB\")\n</code></pre>"},{"location":"docstrings/#src.python.utils.merge_data","title":"<code>merge_data(list_instance_wip_01, list_instance_wip_02, list_broken_row)</code>","text":"<p>Merge two list that contains the dataclasses defined into one.</p> <p>Parameters:</p> Name Type Description Default <code>list_instance_wip_01</code> <code>list[HouseData] | list[HousePriceData]</code> <p>The first list containing the instance to merge.</p> required <code>list_instance_wip_02</code> <code>list[HouseData] | list[HousePriceData]</code> <p>The second list containing the instance to merge.</p> required <code>list_broken_row</code> <code>set[int]</code> <p>contains the house_id to drop.</p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>raise an error in case the house_id of the two instances do not match.</p> <p>Returns:</p> Type Description <code>list[HouseData] | list[HousePriceData]</code> <p>list[HouseData | HousePriceData]: a list containing the instances with the values merged.</p> Source code in <code>src/python/utils.py</code> <pre><code>def merge_data(\n    list_instance_wip_01: list[HouseData] | list[HousePriceData],\n    list_instance_wip_02: list[HouseData] | list[HousePriceData],\n    list_broken_row: set[int],\n) -&gt; list[HouseData] | list[HousePriceData]:\n    \"\"\"Merge two list that contains the dataclasses defined into one.\n\n    Args:\n        list_instance_wip_01 (list[HouseData] | list[HousePriceData]): The first list\n          containing the instance to merge.\n        list_instance_wip_02 (list[HouseData] | list[HousePriceData]): The second list\n          containing the instance to merge.\n        list_broken_row (set[int]): contains the house_id to drop.\n\n    Raises:\n        ValueError: raise an error in case the house_id of the two instances do not match.\n\n    Returns:\n        list[HouseData | HousePriceData]: a list containing the instances with the values merged.\n    \"\"\"\n    list_instances_merged: list[HouseData | HousePriceData] = []\n    for x, y in zip(list_instance_wip_01, list_instance_wip_02):\n        if x.house_id != y.house_id:\n            raise ValueError(\"The id do not match.\")\n        if x.house_id in list_broken_row:\n            continue\n        list_instances_merged.append(merge_dataclasses(x, y))\n    if isinstance(list_instances_merged[0], HouseData):\n        return cast(list[HouseData], list_instances_merged)\n    return cast(list[HousePriceData], list_instances_merged)\n</code></pre>"},{"location":"docstrings/#src.python.utils.merge_dataclasses","title":"<code>merge_dataclasses(instance1, instance2)</code>","text":"<p>Merges two instances of the same data class by taking non-None values from either instance.</p> <p>Parameters:</p> Name Type Description Default <code>instance1</code> <code>T</code> <p>The first input instance.</p> required <code>instance2</code> <code>T</code> <p>The second input instance.</p> required <p>Raises:</p> Type Description <code>TypeError</code> <p>The instances do not share the same class type.</p> <p>Returns:</p> Name Type Description <code>T</code> <code>T</code> <p>Return the instances with the value merged from each others</p> Source code in <code>src/python/utils.py</code> <pre><code>def merge_dataclasses(instance1: T, instance2: T) -&gt; T:\n    \"\"\"Merges two instances of the same data class by taking non-None values from either instance.\n\n    Args:\n        instance1 (T): The first input instance.\n        instance2 (T): The second input instance.\n\n    Raises:\n        TypeError: The instances do not share the same class type.\n\n    Returns:\n        T: Return the instances with the value merged from each others\n    \"\"\"\n    if not isinstance(instance1, type(instance2)):\n        raise TypeError(\"Instances must be of the same data class type\")\n\n    merged_data = {}\n    for field in fields(instance1):  # type: ignore\n        value1 = getattr(instance1, field.name)\n        value2 = getattr(instance2, field.name)\n        merged_data[field.name] = value1 if value1 is not None else value2\n\n    return type(instance1)(**merged_data)\n</code></pre>"},{"location":"docstrings/#src.python.utils.read_csv_data_house","title":"<code>read_csv_data_house(path_csv)</code>","text":"<p>Read the input .csv file given.</p> <p>Returns:</p> Type Description <code>list[HouseData]</code> <p>list[HouseData]: a list containing HouseData instances.</p> Source code in <code>src/python/utils.py</code> <pre><code>def read_csv_data_house(path_csv: Path) -&gt; list[HouseData]:\n    \"\"\"Read the input .csv file given.\n\n    Returns:\n        list[HouseData]: a list containing HouseData instances.\n    \"\"\"\n    list_house_data: list[HouseData] = []\n    with open(path_csv, encoding=\"UTF-8\") as file:\n        csv_reader = csv.DictReader(file, delimiter=\",\")\n        for _, row in enumerate(csv_reader, start=1):\n            (\n                furnishing_status,\n                house_id,\n                n_bathroom,\n                n_stories,\n                n_parking,\n                is_mainroad,\n                has_guestroom,\n                has_hot_water,\n                has_air_conditioning,\n                is_pref_area,\n                has_basement,\n            ) = (\n                row[\"furnishingstatus\"],\n                int(row[\"id\"]),\n                int(row[\"bathrooms\"]),\n                int(row[\"stories\"]),\n                int(row[\"parking\"]),\n                row[\"mainroad\"] == \"yes\",\n                row[\"guestroom\"] == \"yes\",\n                row[\"hotwaterheating\"] == \"yes\",\n                row[\"airconditioning\"] == \"yes\",\n                row[\"prefarea\"] == \"yes\",\n                row[\"basement\"] == \"yes\",\n            )\n            furnishing_id: int = 0\n            if furnishing_status == \"semi-furnished\":\n                furnishing_id = 2\n            elif furnishing_status == \"unfurnished\":\n                furnishing_id = 1\n            elif furnishing_status == \"furnished\":\n                furnishing_id = 0\n            list_house_data.append(\n                HouseData(\n                    house_id=house_id,\n                    n_bathroom=n_bathroom,\n                    n_stories=n_stories,\n                    is_mainroad=is_mainroad,\n                    has_guestroom=has_guestroom,\n                    has_hot_water=has_hot_water,\n                    has_air_conditioning=has_air_conditioning,\n                    n_parking_slot=n_parking,\n                    is_pref_area=is_pref_area,\n                    has_basement=has_basement,\n                    furnishing_id=furnishing_id,\n                )\n            )\n        return list_house_data\n</code></pre>"},{"location":"docstrings/#src.python.utils.read_excel_house_price","title":"<code>read_excel_house_price(path_excel)</code>","text":"<p>Read the input excel.</p> <p>Parameters:</p> Name Type Description Default <code>path_excel</code> <code>Path</code> <p>the path of the input excel.</p> required <p>Returns:</p> Type Description <code>list[HousePriceData]</code> <p>list[HousePriceData]: a list of HousePriceData instances.</p> Source code in <code>src/python/utils.py</code> <pre><code>def read_excel_house_price(path_excel: Path) -&gt; list[HousePriceData]:\n    \"\"\"Read the input excel.\n\n    Args:\n        path_excel (Path): the path of the input excel.\n\n    Returns:\n        list[HousePriceData]: a list of HousePriceData instances.\n    \"\"\"\n    list_house_price_data: list[HousePriceData] = []\n    df_house_price_data = pd.read_excel(path_excel)  # type: ignore\n    price_values: list[int] = df_house_price_data[\"price\"]  # type: ignore\n    for i, price in enumerate(price_values):\n        list_house_price_data.append(HousePriceData(house_id=i, price=price))\n    return list_house_price_data\n</code></pre>"},{"location":"docstrings/#src.python.dataclasses_house.HouseData","title":"<code>HouseData</code>  <code>dataclass</code>","text":"<p>Define the House_data table.</p> Source code in <code>src/python/dataclasses_house.py</code> <pre><code>@dataclass\nclass HouseData:\n    \"\"\"Define the House_data table.\"\"\"\n\n    house_id: int\n    n_bedroom: int | None = None\n    n_bathroom: int | None = None\n    n_stories: int | None = None\n    n_parking_slot: int | None = None\n    is_mainroad: bool | None = None\n    has_guestroom: bool | None = None\n    has_basement: bool | None = None\n    has_hot_water: bool | None = None\n    has_air_conditioning: bool | None = None\n    is_pref_area: bool | None = None\n    furnishing_id: int | None = None\n</code></pre>"},{"location":"docstrings/#src.python.dataclasses_house.HousePriceData","title":"<code>HousePriceData</code>  <code>dataclass</code>","text":"<p>Define the house_price_data table.</p> Source code in <code>src/python/dataclasses_house.py</code> <pre><code>@dataclass\nclass HousePriceData:\n    \"\"\"Define the house_price_data table.\"\"\"\n\n    house_id: int\n    area: int | None = None\n    price: int | None = None\n</code></pre>"}]}